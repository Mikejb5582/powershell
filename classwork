1
    Ensure that you have the latest copy of help by updating your help system.
      update-help
    Which cmdlets deal with the viewing/manipulating of processes?
      get-process
    Display a list of services installed on your local computer. 
      get-service
    What cmdlets are used to write or output objects or text to the screen?
      write-host
    What cmdlets can be used to create, modify, list, and delete variables?
      get-variable
    What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
      get-command
    Find the cmdlet that is used to prompt the user for input.
      read-host
    
2
    not important  
    
3
    really easy
    
4
    Create an array containing a range with a random starting and stopping point.  The starting point will be a random number from -10 through 0.
    The ending point will be a random number from 1 through 20.
        [array]$tired = (get-random -minimum -10 -maximum 0)..(get-random -minimum 1 -maximum 20)
    Create a variable that contains the contents of the array in reverse
        $reverse = $array[($array.length-1) ** reverses array as new variable
        [array]::reverse($tired)..0] ** reverses array
        
5 
    $employee1 = { First = "Mary" ; Last = "Hopper" ; ID = "001" ; Job = "Software Developer" }
    $employee2 = { First = "John" ; Last = "Williams" ; ID = "002" ; Job = "Web Developer" }
    $employee1.username = mhopper001
    $employee2.username = jwilliams002
    $employee3 = { First = "Alex" ; Last = "Moran" ; ID = "003" ; Job = "Software Developer" }
    $employee1.Status = "Management"
    $employee2.Status = "Intermediate"
    $employee3.Status = "Entry Level"
    
6   
    Display the start time of the earliest and latest running processes
       get-process | where-object processname -ne "idle" | sort-object starttime | select-object -last 1 -first 1 | format-table  starttime
    Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
        date , date | select-object dayofweek
    Identify a cmdlet that displays a list of installed hotfixes.
       get-hotfix
    Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
       get-hotfix | sort installedon | format-table installedon, hotfixid
    Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
       get-hotfix | sort description | format-table installedon, hotfixid, description
       
       
7
    $host_info = new-object object
    add-member -membertype noteproperty -name ComputerName -value WIN-OPS -inputobject $host_info
    add-member -membertype noteproperty -name OperatingSystem -value 1.12.0-1ubuntu1.1 -inputobject $host_info
    add-member -membertype noteproperty -name Version  -value 10.0.19041 -inputobject $host_info
    add-member -membertype noteproperty -name Manufacturer -value OpenStack Foundation -inputobject $host_info
    add-member -membertype noteproperty -name Disks -value (get-wmiobject win32_logicaldisk) -inputobject $host_info
    
    
    
8 
    Find model number in line1 or line 2
        $line.$line2 | foreach-object { if($_ -match "[A-Z]{2}[0-9]{4}") { $matches.values } else { 'model not found' } } 
        
        
9
    Part 1


Use an array to iterate and open the following
Notepad
MS Edge
MSpaint
Query the processes
Kill the processes from PowerShell

Part 2

Use an array to iterate and open the following
Notepad
MS Edge
MSpaint
Query the processes
Save the ProcessIDs to a text file called procs.txt
Iterate through the ProcessIDs in the text file and kill them

Part 3

Use an array to iterate and open the following
Notepad
MS Edge
MSpaint
Query the processes and display only the following information in order by process ID
Process ID
Process Name
The time the process started
The amount of time the process has spent on the processor
The amount of memory assigned to the process

#store
$procs = "notepad", "microsoftedge", "mspaint"
#iterate to start
$procs | foreach-object { start-process $_ }
#query
Get-Process
#iterate to stop
$procs | foreach-object { stop-process -processname $_ }


#part 2

#save id's to a text file
$file = "$pwd\procs.txt"

foreach($proc in $procs){
    get-process | where-object{$_.name -like $proc}
    foreach-object{add-content $file $_.Id} }

#iterate through Id's in procs.txt to kill processes
get-content .\procs.txt | foreach-object{stop-process -processnamme $_}

#part 3

#display information about specific processes
foreach($proc in $procs){
    get-process | where-object{$_.name -like $proc}
    format-table -property id, name, starttime, totalprocessortime,
    virtualmemorysize, workingset64 }




10 
        return date in ordinal 
        function orple {
            $day = get-date | select-object -ExpandProperty dayofyear
            $year = get-date | select-object -ExpandProperty year
            write-host "$year-$day"
            }
            
            
        
